#cloud-config

# sets the hostname to 'terraformed'
hostname: terraformed

ssh_authorized_keys:
- [PUBLIC_SSH_KEY]

write_files:
- path: /etc/netplan/20-internal-network.yaml
  content: |
    network:
      version: 2
      ethernets:
        "lo:0":
          match:
            name: lo
          dhcp4: false
          addresses:
          - 10.28.0.1/16
- path: /etc/netplan/10-user-network.yaml
  content: |
    network:
      version: 2
      ethernets:
        ens192:
          dhcp4: false #true to use dhcp
          addresses:
          - [IP_ADDRESS]/[MASK]
          gateway4: [GATEWAY] # Set gw here
          nameservers:
            addresses:
            - 8.8.4.4 # Set DNS ip address here
- path: /usr/bin/initconfig.sh
  content: |
    #!/bin/bash

    sleep 10
    clear
    echo "



    InitConfig

    "
    docker run --rm -it \
            -v /var/lib/cloud/instance:/workdir \
            mikefarah/yq:3 \
            yq r user-data.txt glasswall.cluster | tr '\r' '\n' > /home/ubuntu/cluster.txt
    docker run --rm -it \
            -v /var/lib/cloud/instance:/workdir \
            mikefarah/yq:3 \
            yq r user-data.txt glasswall.monitoring.username | tr '\r' '\n' > /home/ubuntu/monitoring-username.txt
    docker run --rm -it \
            -v /var/lib/cloud/instance:/workdir \
            mikefarah/yq:3 \
            yq r user-data.txt glasswall.monitoring.password | tr '\r' '\n' > /home/ubuntu/monitoring-password.txt
    docker run --rm -it \
            -v /var/lib/cloud/instance:/workdir \
            mikefarah/yq:3 \
            yq r user-data.txt glasswall.logging.username | tr '\r' '\n' > /home/ubuntu/logging-username.txt
    docker run --rm -it \
            -v /var/lib/cloud/instance:/workdir \
            mikefarah/yq:3 \
            yq r user-data.txt glasswall.logging.password | tr '\r' '\n' > /home/ubuntu/logging-password.txt
    docker run --rm -it \
            -v /var/lib/cloud/instance:/workdir \
            mikefarah/yq:3 \
            yq r user-data.txt glasswall.domain | tr '\r' '\n' > /home/ubuntu/domain.txt
    docker run --rm -it \
            -v /var/lib/cloud/instance:/workdir \
            mikefarah/yq:3 \
            yq r user-data.txt glasswall.service-cluster | tr '\r' '\n' > /home/ubuntu/service-cluster.txt
    cluster=$(cat /home/ubuntu/cluster.txt)
    monitoring_username=$(cat /home/ubuntu/monitoring-username.txt)
    monitoring_password=$(cat /home/ubuntu/monitoring-password.txt)
    logging_username=$(cat /home/ubuntu/logging-username.txt)
    logging_password=$(cat /home/ubuntu/logging-password.txt)
    domain=$(cat /home/ubuntu/domain.txt)
    service_cluster=$(cat /home/ubuntu/service-cluster.txt)

    chown -R 1000:1000 /mnt/disks/

    export KUBECONFIG=/etc/kubernetes/admin.conf

    cat /home/ubuntu/cluster.txt | xargs -I {} kubectl patch prometheuses.monitoring.coreos.com kube-prometheus-stack-prometheus -n monitoring --type='json' -p '[{"op": "replace", "path": "/spec/externalLabels/cluster", "value":"'{}'"}]'
    echo "https://influxdb.${service_cluster}/api/v1/prom/write?db=workload_cluster&u=${monitoring_username}&p=${monitoring_password}" > /home/ubuntu/influxdb-url.txt
    cat /home/ubuntu/influxdb-url.txt | xargs -I {} kubectl patch prometheuses.monitoring.coreos.com kube-prometheus-stack-prometheus -n monitoring --type='json' -p '[{"op": "replace", "path": "/spec/remoteWrite/0/url", "value":"'{}'"}]'
    kubectl delete pod -n monitoring prometheus-kube-prometheus-stack-prometheus-0

    kubectl get cm -n fluentd fluentd-fluentd-elasticsearch -o yaml | sed 's/151-glasswall-ovh-kubespray-wc/'"${cluster}"'/' | kubectl apply -f - 
    kubectl get cm -n kube-system fluentd-system-fluentd-elasticsearch -o yaml | sed 's/151-glasswall-ovh-kubespray-wc/'"${cluster}"'/' | kubectl apply -f - 
    kubectl set env daemonset.apps/fluentd-fluentd-elasticsearch -n fluentd OUTPUT_HOST=elastic.${service_cluster}
    kubectl set env daemonset.apps/fluentd-system-fluentd-elasticsearch -n kube-system OUTPUT_HOST=elastic.${service_cluster}
    kubectl set env daemonset.apps/fluentd-fluentd-elasticsearch -n fluentd OUTPUT_USER=${logging_username}
    kubectl set env daemonset.apps/fluentd-system-fluentd-elasticsearch -n kube-system OUTPUT_USER=${logging_username}
    cat /home/ubuntu/logging-password.txt | xargs -I {} kubectl patch secret -n fluentd elasticsearch --type='json' -p '[{"op": "replace", "path": "/data/password", "value":"'{}'"}]'
    cat /home/ubuntu/logging-password.txt | xargs -I {} kubectl patch secret -n kube-system elasticsearch --type='json' -p '[{"op": "replace", "path": "/data/password", "value":"'{}'"}]'

    exit

- path: /etc/systemd/system/initconfig.service
  content: |
    [Unit]
    Description=InitConfig

    [Service]
    Type=oneshot
    ExecStart=/usr/bin/openvt -s -w /usr/bin/initconfig.sh

    RemainAfterExit=yes
    TimeoutSec=0

    # Output needs to appear in instance console output
    StandardOutput=journal+console

    [Install]
    WantedBy=cloud-init.target

runcmd:
  - netplan apply
  - sleep 5
  - ifconfig -a
  - route -n  
  - chmod a+r /var/lib/cloud/instance/user-data.txt
  - chmod 755 /usr/bin/initconfig.sh

glasswall:
  cluster: [CLUSTER_NAME]
  monitoring:
    username: [MONITORING_USERNAME]
    password: [MONITORING_PASSWORD]
  logging:
    username: [LOGGING_USERNAME]
    password: [LOGGING_PASSWORD]
  domain: [DOMAIN]
  service-cluster: [SERVICE_CLUSTER]
